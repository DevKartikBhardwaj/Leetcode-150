//dfs solution - kinda more intutive

public int maxDepth(TreeNode node) {
        if(node==null)
            return 0;
        
        int depth1=maxDepth(node.left);
        int depth2=maxDepth(node.right);

        return 1+Math.max(depth1,depth2);
    }


//bfs solution

  public int maxDepth(TreeNode node) {
        if(node==null)
            return 0;
        
        Queue<TreeNode>q=new LinkedList<>();
        int depth=0;
        q.add(node);

        while(!q.isEmpty()){
            depth++;
            int initialSize=q.size();
            for(int i=0;i<initialSize;i++){
                TreeNode tempNode=q.poll();
                if(tempNode.left != null)
                    q.add(tempNode.left);
                if(tempNode.right != null)
                    q.add(tempNode.right);
            }
        }
        return depth;
    }
}
